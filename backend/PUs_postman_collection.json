{
	"info": {
		"_postman_id": "be48f3a1-19d9-4997-a59e-8a1362643a57",
		"name": "PName",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33076927",
		"_collection_link": "https://web.postman.co/workspace/My-Workspace~b8eb4c3c-f7b0-42e8-8179-265aa729a16a/collection/32937970-be48f3a1-19d9-4997-a59e-8a1362643a57?source=collection_link"
	},
	"item": [
		{
			"name": "Security",
			"item": [
				{
					"name": "signup request",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"testUser\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"email\": \"testUser@bethlehem.edu\",\n  \"password\": \"adpSqwert\",\n  \"university\": \"BETHLEHEM_UNIVERSITY\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/signup",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "login request",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"bsbs\",\n  \"password\": \"adpSqwert\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "test request",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/test",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"test"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Bookmark",
			"item": [
				{
					"name": "get all bookmarks",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/bookmarks",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"bookmarks"
							]
						}
					},
					"response": []
				},
				{
					"name": "get one bookmark",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/bookmarks/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"bookmarks",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "create new bookmark",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"post\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/bookmarks",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"bookmarks"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete a bookmark",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/bookmarks/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"bookmarks",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Comment",
			"item": [
				{
					"name": "all comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/posts/1/comments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"1",
								"comments"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "one comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/posts/1/comments/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"1",
								"comments",
								"1"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "one reply",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/posts/1/comments/1/replies/3",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"1",
								"comments",
								"1",
								"replies",
								"3"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "all replies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/posts/1/comments/1/replies",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"1",
								"comments",
								"1",
								"replies"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "reply",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"post\": 1,\n    \"content\": \"Hello\",\n    \"commentedAt\": \"2024-04-08T23:10:11\",\n    \"repliedComment\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/posts/1/comments/1/replies",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"1",
								"comments",
								"1",
								"replies"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\n    \"post\": 1,\n    \"content\": \"Hello\",\n    \"commentedAt\": \"2024-04-08T23:10:11\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/posts/1/comments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"1",
								"comments"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/posts/1/comments/12",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"1",
								"comments",
								"12"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "reply",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/posts/1/comments/1/replies/11",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"1",
								"comments",
								"1",
								"replies",
								"11"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "reply",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"content\": \"Hello\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/posts/1/comments/1/replies/12",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"1",
								"comments",
								"1",
								"replies",
								"12"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"content\": \"Hello\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/posts/1/comments/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"1",
								"comments",
								"1"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				}
			]
		},
		{
			"name": "Comment Like",
			"item": [
				{
					"name": "all likes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/posts/1/comments/1/likes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"1",
								"comments",
								"1",
								"likes"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "one like",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/posts/1/comments/1/likes/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"1",
								"comments",
								"1",
								"likes",
								"1"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "like",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"reaction\": \"LIKE\",\n    \"comment\" : 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/posts/1/comments/1/likes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"1",
								"comments",
								"1",
								"likes"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "like",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"reaction\": \"LOVE\",\n    \"comment\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/posts/1/comments/1/likes/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"1",
								"comments",
								"1",
								"likes",
								"1"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/posts/1/comments/1/likes/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"1",
								"comments",
								"1",
								"likes",
								"1"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			]
		},
		{
			"name": "Community",
			"item": [
				{
					"name": "all communities",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/communities",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"communities"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "one community",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/communities/2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"communities",
								"2"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "members",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/communities/2/members",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"communities",
								"2",
								"members"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/communities/2/posts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"communities",
								"2",
								"posts"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "reply",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/communities/10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"communities",
								"10"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			]
		},
		{
			"name": "Follower",
			"item": [
				{
					"name": "get one follower",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/1/followers/2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"1",
								"followers",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all followers",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/1/followers",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"1",
								"followers"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all following",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/1/following",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"1",
								"following"
							]
						}
					},
					"response": []
				},
				{
					"name": "get one following",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/1/following/3",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"1",
								"following",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "add new follower",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"followed\": 5\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/1/followers",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"1",
								"followers"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete follower",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/1/followers/2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"1",
								"followers",
								"2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GroupChat",
			"item": [
				{
					"name": "get one group chat",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/group-chats/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"group-chats",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "create new group chat",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Test Group Chat\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/group-chats",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"group-chats"
							]
						}
					},
					"response": []
				},
				{
					"name": "edit group chat",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Test Group Chatooooo\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/group-chats/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"group-chats",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete group chat",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/group-chats/2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"group-chats",
								"2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Group Member",
			"item": [
				{
					"name": "get all group chat members",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/group-chats/1/members",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"group-chats",
								"1",
								"members"
							]
						}
					},
					"response": []
				},
				{
					"name": "get one group chat member",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/group-chats/1/members/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"group-chats",
								"1",
								"members",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "add member to a group chat",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"group\": 1,\n    \"user\": 8,\n    \"role\": \"ADMIN\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/group-chats/1/members",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"group-chats",
								"1",
								"members"
							]
						}
					},
					"response": []
				},
				{
					"name": "update a member",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"group\": 1,\n    \"user\": 8,\n    \"role\": \"MEMBER\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/group-chats/1/members/8",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"group-chats",
								"1",
								"members",
								"8"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete a member",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/group-chats/1/members/8",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"group-chats",
								"1",
								"members",
								"8"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Major",
			"item": [
				{
					"name": "all majors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/major-communities",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"major-communities"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "one major",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/major-communities/{{id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"major-communities",
								"{{id}}"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "all students",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/major-communities/{{id}}/students",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"major-communities",
								"{{id}}",
								"students"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "major",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"major\": \"BACHELOR_IN_SOFTWARE_ENGINEERING\",\n    \"year\": 2023\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/major-communities",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"major-communities"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "student",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"id\": 1\n    },\n    {\n        \"id\": 2\n    },\n    {\n        \"id\": 3\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/major-communities/{{id}}/students",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"major-communities",
								"{{id}}",
								"students"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "major",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/major-communities/{{id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"major-communities",
								"{{id}}"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			]
		},
		{
			"name": "Messages",
			"item": [
				{
					"name": "get all the messages of a user",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/1/messages",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"1",
								"messages"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all the messages between two users",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/1/messages/user/2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"1",
								"messages",
								"user",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all the messages of a group chat",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/1/messages/group/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"1",
								"messages",
								"group",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "sending a message",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"messageContent\": \"Hello, World!\",\n    \"isRead\": false,\n    \"receiver\":\"USER\",\n    \"receiverUser\": 2\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/1/messages",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"1",
								"messages"
							]
						}
					},
					"response": []
				},
				{
					"name": "updating a message",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"messageContent\": \"message Content\",\n    \"isRead\": false,\n    \"receiver\":\"USER\",\n    \"receiverUser\": 2\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/1/messages/13",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"1",
								"messages",
								"13"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleting a message",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/1/messages/5",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"1",
								"messages",
								"5"
							]
						}
					},
					"response": []
				},
				{
					"name": "upload file",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "C:\\Users\\nadin\\Downloads\\Phase 1 Rubric.pdf"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/messages/2/upload",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"messages",
								"2",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all files in a message",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "C:\\Users\\nadin\\Downloads\\Phase 1 Rubric.pdf"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/messages/2/files",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"messages",
								"2",
								"files"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Notification",
			"item": [
				{
					"name": "all notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/notifications",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"notifications"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "one notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/notifications/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"notifications",
								"1"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"notificationType\": \"MESSAGE\",\n    \"content\": \"hguts sent you a message\",\n    \"user\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/notifications",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"notifications"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/notifications/2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"notifications",
								"2"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			]
		},
		{
			"name": "Post",
			"item": [
				{
					"name": "get one post",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/posts/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all posts",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/posts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all posts for a one user",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/posts/user",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "getAllPostsByFollowing",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/posts/user/following",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"user",
								"following"
							]
						}
					},
					"response": []
				},
				{
					"name": "getAllRecentPostsByFollowing",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/posts/user/following/recent",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"user",
								"following",
								"recent"
							]
						}
					},
					"response": []
				},
				{
					"name": "addPost",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"location\": \"Central Park, New York\",\r\n    \"caption\": \"Beautiful spring day!\",\r\n    \"view\": \"COMMUNITY\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/posts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "updatePost",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"location\": \"Location 5555\",\r\n    \"caption\": \"Caption 1\",\r\n    \"view\": \"COMMUNITY\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/posts/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePost",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/posts/4",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "uploadFile",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "C:\\Users\\nadin\\Downloads\\SWER313 and SWER354 Project.pdf"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/posts/1/upload",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"1",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "getListFiles",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "C:\\Users\\nadin\\Downloads\\SWER313 and SWER354 Project.pdf"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/posts/1/files",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"1",
								"files"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "PostLike",
			"item": [
				{
					"name": "getLike",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/posts/1/likes/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"1",
								"likes",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "getAllLikesForPost",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/posts/1/likes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"1",
								"likes"
							]
						}
					},
					"response": []
				},
				{
					"name": "addLike",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"post\": 1,\r\n    \"reaction\": \"LIKE\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/posts/1/likes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"1",
								"likes"
							]
						}
					},
					"response": []
				},
				{
					"name": "editLike",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"post\": 1,\r\n    \"reaction\": \"LOVE\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/posts/1/likes/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"1",
								"likes",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteLike",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user\" : {\r\n        \"id\" : 1\r\n    },\r\n    \"post\" : {\r\n        \"id\" : 1\r\n    },\r\n    \"reaction\" : \"LOVE\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/posts/1/likes/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"1",
								"likes",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "SharePost",
			"item": [
				{
					"name": "getSharedPost",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/1/shared-posts/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"1",
								"shared-posts",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "sharePost",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"location\" : \"bethlehem\",\r\n    \"caption\" : \"nice\",\r\n    \"user\" : 1,\r\n    \"post\" : 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/1/shared-posts/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"1",
								"shared-posts",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateSharedPost",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"location\" : \"bethlehem\",\r\n    \"caption\" : \"niceeee\",\r\n    \"user\" : 1,\r\n    \"post\" : 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/1/shared-posts/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"1",
								"shared-posts",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteSharedPost",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"location\" : \"ramallah\",\r\n    \"caption\" : \"nice\",\r\n    \"user\" : {\r\n        \"id\" : 1\r\n    },\r\n    \"post\" : {\r\n        \"id\" : 1\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/1/shared-posts/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"1",
								"shared-posts",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Story",
			"item": [
				{
					"name": "getStoryById",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/stories/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"stories",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "getAllStories",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/stories",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"stories"
							]
						}
					},
					"response": []
				},
				{
					"name": "getStoriesByFollowing",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/stories/users/1/followings",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"stories",
								"users",
								"1",
								"followings"
							]
						}
					},
					"response": []
				},
				{
					"name": "getStoriesByUserId",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/stories/users/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"stories",
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "addStory",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"location\": \"Golden Gate Bridge, San Francisco\",\r\n    \"caption\": \"Foggy morning walks!\",\r\n    \"view\": \"PUBLIC\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/stories",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"stories"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteStory",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/stories/3",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"stories",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateStory",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"location\": \"Golden Gate Bridge, San Francisco\",\r\n    \"caption\": \"Foggy morning walks!\",\r\n    \"view\": \"PUBLIC\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/stories/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"stories",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ReplyToStory",
			"item": [
				{
					"name": "addReplyToStory",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"replyContent\": \"Hello\",\r\n    \"story\": 3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/stories/3/replies",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"stories",
								"3",
								"replies"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateReply",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user\": 1,\r\n    \"replyContent\": \"Hello\",\r\n    \"story\": 3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/stories/3/replies/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"stories",
								"3",
								"replies",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "getReply",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user\" : {\r\n        \"id\" : 1\r\n    },\r\n    \"replyContent\" : \"Hello\",\r\n    \"story\" : {\r\n        \"id\" : 13\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/stories/1/replies/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"stories",
								"1",
								"replies",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "getRepliesToStory",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/stories/1/replies",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"stories",
								"1",
								"replies"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteReply",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/stories/1/replies/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"stories",
								"1",
								"replies",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "StoryLike",
			"item": [
				{
					"name": "getLike",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/stories/1/users/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"stories",
								"1",
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "addLike",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"story\": 1,\r\n    \"reaction\" : \"LOVE\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/stories/1/likes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"stories",
								"1",
								"likes"
							]
						}
					},
					"response": []
				},
				{
					"name": "editLike",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"reaction\" : \"HAHAHAHA\",\r\n    \"story\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/stories/1/users/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"stories",
								"1",
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteLike",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/stories/1/users/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"stories",
								"1",
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "getAllLikesForStory",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/stories/1/likes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"stories",
								"1",
								"likes"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Section",
			"item": [
				{
					"name": "all sections",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/sections",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sections"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "one section",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/sections/{{id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sections",
								"{{id}}"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "section",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"course\": \"SWER141\",\n    \"division\": 2,\n    \"year\": 2024,\n    \"semester\": 2\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/sections",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sections"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "all students",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/sections/{{id}}/students",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sections",
								"{{id}}",
								"students"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "student",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"id\": 1\n    },\n    {\n        \"id\": 2\n    },\n    {\n        \"id\": 3\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/sections/{{id}}/students",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sections",
								"{{id}}",
								"students"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "section",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/sections/{{id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sections",
								"{{id}}"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "get all users",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "get one user",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "update a user info",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"isActive\": \"OFFLINE\",\n    \"bio\": \"Ehab King First User and Adminstrator of the Platform\",\n    \"community\": \"BETHLEHEM_UNIVERSITY\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Viewer",
			"item": [
				{
					"name": "addView",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"story\": 7\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/stories/1/views",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"stories",
								"1",
								"views"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteView",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/stories/1/views/2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"stories",
								"1",
								"views",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "getViews",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/stories/1/views",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"stories",
								"1",
								"views"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.test(\"Successful POST request\", function () {",
					"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
					"});"
				]
			}
		}
	]
}